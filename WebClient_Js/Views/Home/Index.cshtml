@{
    ViewData["Title"] = "Home Page";
}

<section class="chat">
    <div class="form-wrapper">
        <div class="wrapper state-wrapper">
            <p>State:</p>
            <p id="conState">Disconnected</p>
            <button id="connectButton" type="button" onclick="connect()">Connect</button>
        </div>
        <div class="wrapper login-wrapper">
            <label for="name">Name</label>
            <input id="name" type="text" placeholder="Anonymous">
            <div class="btn-wrapper">
                <button type="button" onclick="getMyName()">Get</button>
                <button type="button" onclick="setMyName()">Set</button>
            </div>
            <div class="btn-wrapper">
                <button type="button" onclick="fromServerStream()">From server</button>
                <button type="button" onclick="toServerStream()">To server</button>
            </div>
        </div>
        <div class="wrapper message-wrapper">
            <label for="wrapper message">Text</label>
            <textarea id="message"></textarea>
            <button type="button" onclick="sendMessage()">Send</button>
        </div>
    </div>
    <div class="messages-wrapper">
        <div id="messages-content">

        </div>
    </div>

</section>

@section Styles
{
    <style>
        p {
            margin-bottom: 0
        }

        .chat {
            display: flex;
            justify-content: space-between
        }

        .form-wrapper {
            width: 30%
        }

            .form-wrapper .wrapper {
                display: flex;
                align-items: center;
                margin-bottom: 15px;
                justify-content: space-between;
            }

        .login-wrapper, .message-wrapper {
            flex-wrap: wrap;
        }

        .btn-wrapper {
            width: 100%;
            padding-top: 15px;
        }

            .btn-wrapper button {
                float: right;
                width: 30%;
                justify-content: flex-end
            }

                .btn-wrapper button:last-child {
                    margin-right: 10px
                }

        .message-wrapper {
            align-items: flex-start;
        }

            .message-wrapper label {
                margin-right: 15px;
                width: 10%;
            }

            .message-wrapper textarea {
                width: 80%;
            }

            .message-wrapper button {
                margin-left: auto;
                margin-top: 15px;
            }

        .messages-wrapper {
            width: 65%;
            display: block;
        }

            .messages-wrapper #messages-content {
                border: 1px solid #000;
                min-height: 500px;
            }
    </style>
}

@section Scripts
{
    <script type="text/javascript" src="~/js/signalr.min.js"></script>
    <script type="text/javascript" src="~/js/msgpack5.min.js"></script>
    <script type="text/javascript" src="~/js/signalr-protocol-msgpack.min.js"></script>
    <script type="text/javascript">
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("http://localhost:57701/message")
            .withAutomaticReconnect()
            .withHubProtocol(new signalR.protocols.msgpack.MessagePackHubProtocol())
            .configureLogging(signalR.LogLavel.Debug)
            .build();

        connection.on('Send', (message) => {
            appendMessage(message.Sender, message.Text, 'black');
        });

        connection.onclose(error => {
            console.log('Connection closed. ', error)
        });

        connection.onreconnecting(error => {
            console.log('Connection reconnecting. ', error);
        });

        connection.onreconnected(connectionId => {
            console.log('Connectin reconnected with id: ', connectionId);
        });

        function appendMessage(sender, message, color) {
            document.querySelector('#messages-content').insertAdjacentHTML("beforeend", `<div style="color:${color}"><p>Sender: ${sender}</p><p>Text: ${message}</p></div><br>`);
        }

        async function connect() {
            if (connection.state === 'Disconnected') {
                try {
                    await connection.start();
                }
                catch (error) {
                    console.log(error);
                }
                if (connection.state === 'Connected') {
                    document.querySelector('#conState').textContent = 'Connected';
                    document.querySelector('#conState').style.color = 'green';
                    document.querySelector('#connectButton').textContent = 'Disconnect';
                }
            } else if (connection.state === 'Connected') {
                await connection.stop();
                document.querySelector('#conState').textContent = 'Disconnected';
                document.querySelector('#conState').style.color = 'red';
                document.querySelector('#connectButton').textContent = 'Connect';
            }
        };

        async function sendMessage() {
            if (connection.state === 'Connected') {
                let textArea = document.querySelector('#message');
                let message = { Text: textArea.value };
                try {
                    await connection.send('SendToOthers', message);
                    appendMessage('Me', message.text, 'green');
                }
                catch (error) {
                    console.log(error);
                }
                document.querySelector('#message').value = '';
            }
        }

        async function getMyName() {
            if (connection.state === 'Connected') {
                try {
                    let myName = await connection.invoke('GetMyName');
                    document.querySelector('#name').value = myName;
                }
                catch (error) {
                    console.log(error);
                }
            }
        }

        async function setMyName() {
            if (connection.state === 'Connected') {
                try {
                    let name = document.querySelector('#name').value;
                    await connection.send('SetMyName', name);
                }
                catch (error) {
                    console.log(error);
                }
            }
        }
        function fromServerStream(){
            let stream = connection.stream("DownloadStream").subscribe({
                next: (item)=>{console.log(item);},
                complete: ()=>{console.log('Stream from server completed');},
                error: (err)=>{console.log('Stream error');}
            });
        }
        async function toServerStream(){
            const subject = new signalR.subject();
            connection.send("UploadStream", subject);
            for (let i=0;i<10;i++){
                subject.next(i);
                await sleep(1000);
            }
            subject.complete();
        }
        function sleep(ms){
            return new Promise(resolve=>setTimeout(resolve,ms));
        }
    </script>
}